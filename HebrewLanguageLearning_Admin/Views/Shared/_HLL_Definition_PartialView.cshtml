@model HebrewLanguageLearning_Admin.Models.HLL_DefinitionModel
    @{ 
        var PopUpHeader = "Language Learning Definition";
        if(string.IsNullOrEmpty(Model.LanLernDefId)) { PopUpHeader = "Dictionary Definition"; }
    }
<div class="modal-dialog">
    <div id="frmloading" style="display:none;">
        <div class="loading">Loading&#8230;</div>
    </div>
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title"><i class="icon-paragraph-justify2"></i> @PopUpHeader</h4>
        </div>
        <!-- Form inside modal -->
        <form action="#" role="form">
            <div class="modal-body with-padding">
                <div class="block-inner text-info">
                    <h6 class="heading-hr">
                        @Html.HiddenFor(model => model.DefinitionId, new { @id = "PopUp_DefinitionId" })
                        @Html.HiddenFor(model => model.LanLernDefId, new { @id = "PopUp_LanLernDefId" })
                        @Html.DisplayFor(model => model.Title)
                        <small id="errorMessage" class="display-block text-danger"> </small>
                    </h6>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4">
                            <label>Picture Name:</label>
                            @Html.EditorFor(model => model.PictureTitle, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PictureTitle, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-3">
                            <label>Select Picture:</label>
                            <div class="controls imgParent">
                                @Html.TextBoxFor(p => p.Imagefile, null, new { data_val = "false", type = "file", @class = "input-file", name = "fileUpload", id = "fileUpload" })
                                <span class="fileupload"><span class="icon-upload2"></span>Choose File</span>
                                @Html.ValidationMessageFor(n => n.Imagefile, null, new { @class = "text_danger" })
                                <div class="col-md-2" style="margin-left:100px!important" id="output"></div>
                            </div>
                            @*<div class="uploader" id="uniform-report-screenshot"><input type="file" class="styled form-control" id="report-screenshot"><span class="filename" style="user-select: none;">No file selected</span><span class="action" style="user-select: none;">Choose File</span></div>
                                <span class="help-block">Accepted formats: gif, png, jpg. Max file size 2Mb</span>*@
                        </div>

                        <div class="col-md-3">
                            <input type="button" value="+ Add" onclick="addNewImage()" class="btn btn-info pull-right">
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <table>
                        <tbody id="ImageList">
                            @foreach (var item in Model.PictureList)
                            {
                                <tr>
                                    <td>
                                        @item.Title
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-6">
                            <label>Semantic Domains</label>
                            <input type="text" placeholder="Semantic Domains" class="form-control" id="txtSemanticDomains">
                        </div>
                        <div class="col-sm-6">
                            <br />

                            <input type="button" value="+ Add Semantic Domains" onclick="addNewSemanticDomains()" class="btn btn-info">
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <table>
                        <tbody id="SemanticList">
                            @foreach (var item in Model.SemanticDomainsList)
                            {
                                <tr>
                                    <td>
                                        @item.Title
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-6">
                            <label>Examples</label>
                            <input type="text" placeholder="Examples" class="form-control" id="txtExamples">
                        </div>
                        <div class="col-sm-6">
                            <br />

                            <input type="button" value="+ Add Examples" onclick="addNewExamples()" class="btn btn-info">
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <table>
                        <tbody id="ExamplesList">
                            @foreach (var item in Model.ExampleList)
                            {
                                <tr>
                                    <td>
                                        @item.Title
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning" data-dismiss="modal">Close</button>
                <button type="button" onclick="SaveFromData(1)" class="btn btn-primary">Save and Exit</button>
                <button type="button" onclick="SaveFromDataAndNext()" class="btn btn-success">Save and Go to Next Def</button>
            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    var Image_List = [], SemanticDomains_List = [], Examples_List = [];
    var _masterId = $('#PopUp_LanLernDefId').val(); var TableRefName = "HLL_LanguageLearningDefinition";
    if (_masterId == "") { _masterId = $('#PopUp_DefinitionId').val(); TableRefName = "HLL_Definition"; }
    //var Imagemodel = {
    //    Title: value.Title,
    //    ImgUrl: value.ImageData,
    //    MasterTableId: $('#PopUp_DefinitionId').val(),
    //};
    addNewImage = function () {
        debugger;
        $('#errorMessage').text("");
        var PictureTitle = $('#PictureTitle').val();
        var ImageSrcData = $('.imgcont').children('img').attr("src");

        if (PictureTitle == "" || typeof PictureTitle == 'undefined') {
            $('#errorMessage').text("Please enter Image Title");
        } else

            if (ImageSrcData == "" || typeof ImageSrcData == 'undefined') { $('#errorMessage').text("Please Upload Image file"); } else {
                Image_List.push({ Title: PictureTitle, ImgUrl: ImageSrcData, MasterTableId: _masterId, TableRef: TableRefName });
                $('#PictureTitle').val("");
                $('#output').empty();
                $('#ImageList').append("<tr><td>" + PictureTitle + "</tr></td>");
            }
    };
    addNewSemanticDomains = function () {
        debugger;
        $('#errorMessage').text("");
        var SemanticDomains = $('#txtSemanticDomains').val();

        if (SemanticDomains == "" || typeof SemanticDomains == 'undefined') {
            $('#errorMessage').text("Please enter Semantic Domains Title");
        } else {

            SemanticDomains_List.push({ Title: SemanticDomains, MasterTableId: _masterId });
            $('#txtSemanticDomains').val("");

            $('#SemanticList').append("<tr><td>" + SemanticDomains + "</tr></td>");
        }
    };
    addNewExamples = function () {

        $('#errorMessage').text("");
        var ExamplesData = $('#txtExamples').val();

        if (ExamplesData == "" || typeof ExamplesData == 'undefined') {
            $('#errorMessage').text("Please enter Examples Title");
        } else {

            Examples_List.push({ Title: ExamplesData, MasterTableId: _masterId });
            $('#txtExamples').val("");
            $('#ExamplesList').append("<tr><td>" + ExamplesData + "</tr></td>");
        }
    };
    function compareValue(target, Current) {
        //debugger;
        if (target == Current) {
            location.reload();
        }
    }
    function SaveFromData(stateBehavior) {
        var target = 0; var action = 0;
        debugger;
        if (Image_List.length > 0) { target++; } if (SemanticDomains_List.length > 0) { target++; } if (Examples_List.length > 0) { target++; }
        if (Image_List.length > 0) {
            $.ajax({
                type: "POST",
                cache: false,
                url: '@Url.Action("InsertMultiplePicture", "MediaPictures")',
                dataType: "html",
                contentType: 'application/json',
                data: JSON.stringify(Image_List),
                success: function (result) {
                    Image_List = [];
                    action++;
                    compareValue(target, action);
                    //  flag.val++;
                },
                error: function (result) {
                    console.log("resultError" + JSON.stringify(result));
                }
            })
        }
        /* InsertMultipleSemanticDomain  */
        if (SemanticDomains_List.length > 0) {
            var async1 = $.ajax({
                type: "POST",
                cache: false,
                url: '@Url.Action("InsertMultipleSemanticDomain", "SemanticDomain")',
                dataType: "html",
                contentType: 'application/json',
                data: JSON.stringify(SemanticDomains_List),
                success: function (result) {
                    SemanticDomains_List = [];
                    action++;
                    compareValue(target, action);
                    //   flag.val++;
                },
                error: function (result) {
                    console.log("resultError" + JSON.stringify(result));
                }
            });
        }
        /* InsertMultipleExamples  */
        if (Examples_List.length > 0) {
            var async2 = $.ajax({
                type: "POST",
                cache: false,
                url: '@Url.Action("InsertMultipleExamples", "Example")',
                dataType: "html",
                contentType: 'application/json',
                data: JSON.stringify(Examples_List),
                success: function (result) {
                    Examples_List = [];
                    action++;
                    compareValue(target, action);
                    //    flag.val++;
                },
                error: function (result) {
                    console.log("resultError" + JSON.stringify(result));
                }
            });
        }
        if (stateBehavior == 1) {
            $('#frmloading').show();
            $.when(async2, async1).done(function (result2, result1) {
                location.reload();
            });
        }
    }
    $(document).ready(function () {

        if (window.File && window.FileList && window.FileReader) {
            $("#fileUpload").on("change", function (e) {
                $(".field-validation-error").hide();
                var ext = $(this).val().split('.').pop().toLowerCase();
                if ($.inArray(ext, ['gif', 'png', 'jpg', 'jpeg']) == -1) {
                    if (ext != '') {
                        $("#output").empty();
                        $("#fileToUpload").val("");
                        $('#headerdiv').removeClass("btn-success").removeClass("btn-info").addClass("btn-danger");
                        $('#modeltitle').html("Important Message !!")
                        $('#modelMessage').html("Please Select Only Image file like GIF, PNG, JPG, JPEG")
                        $('.modal-footer').html('<a id="btnYes" href="#" data-dismiss="modal" class="btn btn-primary">Ok</a>');
                        $('#default_modal').modal('show');
                    }

                } else {
                    var files = e.target.files,
                    filesLength = files.length;
                    for (var i = 0; i < filesLength ; i++) {
                        var f = files[i]
                        var fileReader = new FileReader();
                        fileReader.onload = (function (e) {
                            $("#output").empty();
                            var file = e.target;
                            var h = "<div class='imgcont'><img src='" + e.target.result + "' title = '" + file.name + "' class='imageThumb'><i class='fa fa-minus del'></i></div>";
                            $("#output").html(h);
                        });
                        fileReader.readAsDataURL(f);
                    }
                }
            });
        } else { console.log("Your browser doesn't support to File API"); }
    });
</script>