@model HebrewLanguageLearning_Admin.Models.HLL_HebrewApplicationDataModel
<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title"><i class="icon-paragraph-justify2"></i>Application Correct Answer @Html.DisplayFor(x => x.CorrectAnswerNo)</h4>
        </div>
        <!-- Form inside modal -->
@using (Ajax.BeginForm("CreateHebrewAppData", "Application" , new AjaxOptions { UpdateTargetId = "result" }, new { enctype = "multipart/form-data" ,@id= "CreateHebrewAppData" }))
{

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.HebrewApplicationDataNo, new { @id = "PopUp_CorrectAnswerID" })
            <div class="modal-body with-padding">
                <div id="result"/>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4 center">
                            <label>Hebrew Application @Html.DisplayFor(x => x.CorrectAnswerNo) :</label>
                            @*@Html.EditorFor(model => model.CorrectAnswer1, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CorrectAnswer1, "", new { @class = "text-danger" })*@
                        </div>

                        <div class="col-md-8">
                            @*<label>Correct Answer 2:</label>*@
                            <label> @Html.DisplayFor(x => x.HebrewApplicationData) </label>
                                @*@Html.EditorFor(model => model.HebrewApplicationData, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HebrewApplicationData, "", new { @class = "text-danger" })*@
</div>
                    </div>
                    <div class="block-inner text-info">
                        <h6 class="heading-hr">
                            @Html.HiddenFor(model => model.HebrewApplicationDataNo, new { @id = "PopUp_DefinitionId" })
                            @Html.HiddenFor(model => model.HebrewApplicationDataId)
                            <small id="errorMessage" class="display-block text-danger"> </small>
                        </h6>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Correct Answer 1:</label>
                            @Html.EditorFor(model => model.CorrectAnswer1, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer1, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            <label>Correct Answer 2:</label>
                            @Html.EditorFor(model => model.CorrectAnswer2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Correct Answer 3:</label>
                            @Html.EditorFor(model => model.CorrectAnswer3, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer3, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            <label>Correct Answer 4:</label>
                            @Html.EditorFor(model => model.CorrectAnswer4, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer4, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Correct Answer 5:</label>
                            @Html.EditorFor(model => model.CorrectAnswer5, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer5, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            <label>Correct Answer 6:</label>
                            @Html.EditorFor(model => model.CorrectAnswer6, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer6, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Correct Answer 7:</label>
                            @Html.EditorFor(model => model.CorrectAnswer7, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer7, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            <label>Correct Answer 8:</label>
                            @Html.EditorFor(model => model.CorrectAnswer8, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer8, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Correct Answer 9:</label>
                            @Html.EditorFor(model => model.CorrectAnswer9, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer9, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            <label>Correct Answer 10:</label>
                            @Html.EditorFor(model => model.CorrectAnswer10, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CorrectAnswer10, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="SaveFromDataCorrectAnswer()" value="Save">Save and Exit</button>
                <button type="button" class="btn btn-success" onclick="SaveFromDataAndNext()" value="SaveNext">Save and Next</button>

                @*<button type="button" onclick="SaveFromData(1)" class="btn btn-primary">Save and Exit</button>
                <button type="button" onclick="SaveFromDataAndNext()" class="btn btn-success">Save and Go to Next Def</button>*@
            </div>
       
}
    </div>
</div>

<script type="text/javascript">
    var Image_List = [], SemanticDomains_List = [], Examples_List = [];
    addNewImage = function () {

        debugger;


        $('#errorMessage').text("");
        var PictureTitle = $('#PictureTitle').val();
        var ImageSrcData = $('.imgcont').children('img').attr("src");

        if (PictureTitle == "" || typeof PictureTitle == 'undefined') {
            $('#errorMessage').text("Please enter Image Title");
        } else

            if (ImageSrcData == "" || typeof ImageSrcData == 'undefined') { $('#errorMessage').text("Please Upload Image file"); } else {
                Image_List.push({ Title: PictureTitle, ImageData: ImageSrcData });
                $('#PictureTitle').val("");
                $('#output').empty();
                $('#ImageList').append("<tr><td>" + PictureTitle + "</tr></td>");
            }
    };
    addNewSemanticDomains = function () {
        debugger;
        $('#errorMessage').text("");
        var SemanticDomains = $('#txtSemanticDomains').val();

        if (SemanticDomains == "" || typeof SemanticDomains == 'undefined') {
            $('#errorMessage').text("Please enter Semantic Domains Title");
        } else {

            SemanticDomains_List.push({ Title: SemanticDomains });
            $('#txtSemanticDomains').val("");

            $('#SemanticList').append("<tr><td>" + SemanticDomains + "</tr></td>");
        }
    };
    addNewExamples = function () {

        $('#errorMessage').text("");
        var ExamplesData = $('#txtExamples').val();

        if (ExamplesData == "" || typeof ExamplesData == 'undefined') {
            $('#errorMessage').text("Please enter Examples Title");
        } else {

            Examples_List.push({ Title: ExamplesData });
            $('#txtExamples').val("");
            $('#ExamplesList').append("<tr><td>" + ExamplesData + "</tr></td>");
        }
    };

    function SaveFromData(stateBehavior) {
        alert(stateBehavior);
        $.each(Image_List, function (key, value) {
            var Imagemodel = {
                Title: value.Title,
                ImgUrl: value.ImageData,
                DefinitionId: $('#PopUp_DefinitionId').val(),

            };
            $.ajax({
                type: "POST",
                cache: false,
                url: '@Url.Action("CreateImage", "Pictures")',
                dataType: "html",
                contentType: 'application/json',
                data: JSON.stringify(Imagemodel),
                success: function (result) {
                    Image_List = [];
                    //console.log("result" + result);
                },
                error: function (result) {
                    console.log("resultError" + JSON.stringify(result));
                }
            })
        });
        $.each(SemanticDomains_List, function (key, value) {
            var Semanticmodel = {
                Title: value.Title,
                DefinitionId: $('#PopUp_DefinitionId').val(),

            };
            $.ajax({
                type: "POST",
                cache: false,
                url: '@Url.Action("CreateSemanticDomain", "SemanticDomain")',
                dataType: "html",
                contentType: 'application/json',
                data: JSON.stringify(Semanticmodel),
                success: function (result) {
                    SemanticDomains_List = [];
                    //console.log("result" + result);
                },
                error: function (result) {
                    console.log("resultError" + JSON.stringify(result));
                }
            })
        });
        $.each(Examples_List, function (key, value) {
            var Examplesmodel = {
                Title: value.Title,
                DefinitionId: $('#PopUp_DefinitionId').val(),

            };
            $.ajax({
                type: "POST",
                cache: false,
                url: '@Url.Action("CreateExample", "Example")',
                dataType: "html",
                contentType: 'application/json',
                data: JSON.stringify(Examplesmodel),
                success: function (result) {
                    Examples_List = [];
                    //console.log("result" + result);
                },
                error: function (result) {
                    console.log("resultError" + JSON.stringify(result));
                }
            })
        });
        if (stateBehavior == 1) {
            location.reload();
        }
    }
    $(document).ready(function () {

        if (window.File && window.FileList && window.FileReader) {
            $("#fileUpload").on("change", function (e) {
                $(".field-validation-error").hide();
                var ext = $(this).val().split('.').pop().toLowerCase();
                if ($.inArray(ext, ['gif', 'png', 'jpg', 'jpeg']) == -1) {
                    if (ext != '') {
                        $("#output").empty();
                        $("#fileToUpload").val("");
                        $('#headerdiv').removeClass("btn-success").removeClass("btn-info").addClass("btn-danger");
                        $('#modeltitle').html("Important Message !!")
                        $('#modelMessage').html("Please Select Only Image file like GIF, PNG, JPG, JPEG")
                        $('.modal-footer').html('<a id="btnYes" href="#" data-dismiss="modal" class="btn btn-primary">Ok</a>');
                        $('#default_modal').modal('show');
                    }

                } else {
                    var files = e.target.files,
                    filesLength = files.length;
                    for (var i = 0; i < filesLength ; i++) {
                        var f = files[i]
                        var fileReader = new FileReader();
                        fileReader.onload = (function (e) {
                            $("#output").empty();
                            var file = e.target;
                            var h = "<div class='imgcont'><img src='" + e.target.result + "' title = '" + file.name + "' class='imageThumb'><i class='fa fa-minus del'></i></div>";
                            $("#output").html(h);
                        });
                        fileReader.readAsDataURL(f);
                    }
                }
            });
        } else { alert("Your browser doesn't support to File API") }
    });
   
</script>

